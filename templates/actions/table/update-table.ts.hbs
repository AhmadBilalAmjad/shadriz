"use server";

import { db } from "@/lib/db";
import { insert{{capitalizedTable}}Schema, {{table}} } from "@/schema/{{table}}";
import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
{{#if private}}
import { auth } from "@/auth";
{{/if}}

export interface Update{{capitalizedTable}}State {
  errors?: {
    {{#each columns}}
    {{this}}?: string[];
    {{/each}}
  };
  message?: string;
}

export async function update{{capitalizedTable}}(
  prevState: Update{{capitalizedTable}}State,
  formData: FormData
): Promise<Update{{capitalizedTable}}State> {
{{#if private}}
  const session = await auth();
  if (!session) {
    throw new Error("access denied")
  }
{{/if}}

  const validatedFields = insert{{capitalizedTable}}Schema.safeParse({
{{formDataKeyVal}}
  });
  if (!validatedFields.success) {
    console.log(validatedFields.error.flatten().fieldErrors);

    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "error",
    };
  }
  if (!validatedFields.data.id) {
    return {
      message: "error",
    };
  }
  await db
    .update({{table}})
    .set({
      {{#each columns}}
      {{this}}: validatedFields.data.{{this}},
      {{/each}}
    })
    .where(eq({{table}}.id, validatedFields.data.id));

  revalidatePath("/{{table}}");
  revalidatePath("/{{table}}/" + validatedFields.data.id);
  revalidatePath("/{{table}}/" + validatedFields.data.id + "/edit");

  return {
    message: "success",
  };
}

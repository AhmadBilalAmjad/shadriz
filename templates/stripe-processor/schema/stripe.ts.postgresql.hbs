import {
  timestamp,
  pgTable,
  text,
  primaryKey,
  integer,
  boolean,
  uuid,
  json,
  pgEnum,
  date,
  unique,
  doublePrecision,
  bigserial,
  bigint,
} from "drizzle-orm/pg-core";
import { user } from "./user";
{{#if isUuidv7}}
import { uuidv7 } from "uuidv7";
{{/if}}

export const stripe_webhook = pgTable("stripe_webhook", {
  {{pkText}}
  payload: json("payload"),
  created_at: timestamp("created_at").notNull().defaultNow(),
});

export const product = pgTable("product", {
  {{pkText}}
  slug: text("slug").notNull().unique(),
  stripe_product_id: text("stripe_product_id").notNull().unique(),
  stripe_price_id: text("stripe_price_id"),
  name: text("name").notNull(),
  price: integer("price").notNull(),
  description: text("description"),
  mode: text("mode").notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
  updated_at: timestamp("updated_at").notNull().defaultNow(),
});

export const order = pgTable("order", {
  {{pkText}}
  user_id: uuid("user_id").notNull().references(() => user.id),
  product_id: uuid("product_id").notNull().references(() => product.id),
  stripe_product_id: text("stripe_product_id").notNull(),
  stripe_price_id: text("stripe_price_id").notNull(),
  amount_total: integer("amount_total").notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
});

export const subscription = pgTable("subscription", {
  {{pkText}}
  user_id: uuid("user_id").notNull().references(() => user.id),
  product_id: uuid("product_id").notNull().references(() => product.id),
  start_date: date("start_date", { mode: "date" }).notNull(),
  end_date: date("end_date", { mode: "date" }).notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
  updated_at: timestamp("updated_at").notNull().defaultNow(),
});
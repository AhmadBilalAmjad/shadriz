import {
  timestamp,
  pgTable,
  text,
  primaryKey,
  integer,
  boolean,
  uuid,
  json,
  pgEnum,
  date,
  unique,
  doublePrecision,
} from "drizzle-orm/pg-core";
{{#if isUuidv7}}
import { uuidv7 } from "uuidv7";
{{/if}}

export const stripeWebhooks = pgTable("stripe_webhook", {
  id: uuid("id").notNull().primaryKey().defaultRandom(),
  payload: json("payload"),
  created_at: timestamp("created_at").notNull().defaultNow(),
});

export const modeEnum = pgEnum("mode", ["payment", "subscription"]);

export const products = pgTable("product", {
  id: uuid("id").primaryKey().notNull().defaultRandom(),
  shortid: text("shortid").unique(),
  stripe_product_id: text("stripe_product_id").notNull().unique(),
  stripe_price_id: text("stripe_price_id").notNull(),
  name: text("name").notNull(),
  price: integer("price").notNull(),
  description: text("description"),
  mode: modeEnum("mode").notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
  updated_at: timestamp("updated_at").notNull().defaultNow(),
});

export const orders = pgTable("order", {
  id: uuid("id").primaryKey().notNull().defaultRandom(),
  user_id: text("user_id").references(() => users.id),
  product_id: uuid("product_id").references(() => products.id),
  stripe_product_id: text("stripe_product_id").references(
    () => products.stripe_product_id
  ),
  stripe_price_id: text("stripe_price_id"),
  amount_total: integer("amount_total"),
  created_at: timestamp("created_at").notNull().defaultNow(),
});

export const subscriptions = pgTable("subscription", {
  id: uuid("id").primaryKey().notNull().defaultRandom(),
  user_id: text("user_id")
    .notNull()
    .unique()
    .references(() => users.id),
  start_date: date("start_date", { mode: "date" }).notNull(),
  end_date: date("end_date", { mode: "date" }).notNull(),
  created_at: timestamp("created_at").notNull().defaultNow(),
  updated_at: timestamp("updated_at").notNull().defaultNow(),
});
"use server";

import { db } from "@/lib/db";
import { insert{{capitalizedTable}}Schema, {{table}}, {{capitalizedTable}} } from "@/schema/{{table}}";
import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
{{#if importFileUtils}}
import { getUploadPath, uploadFile } from "@/lib/file-utils";
{{/if}}
{{#if isNotPublic}}
import { auth } from "@/lib/auth";
{{/if}}
{{#if isAdmin}}
import { hasAdminRole } from "@/lib/authorization";
{{/if}}

export interface Update{{capitalizedTable}}State {
  errors?: {
    {{#each columns}}
    {{this}}?: string[];
    {{/each}}
  };
  message?: string;
}

export async function update{{capitalizedTable}}(
  prevState: Update{{capitalizedTable}}State,
  formData: FormData
): Promise<Update{{capitalizedTable}}State> {
{{#if isNotPublic}}
  const session = await auth();
  if (!session?.user?.id) {
    throw new Error("access denied");
  }
{{/if}}
{{#if isAdmin}}
  const isAdmin = await hasAdminRole(session.user.id);
  if (!isAdmin) {
    throw new Error("unauthorized");
  }
{{/if}}

  const validatedFields = insert{{capitalizedTable}}Schema.safeParse({
{{formDataKeyVal}}
  });
  if (!validatedFields.success) {
    console.log(validatedFields.error.flatten().fieldErrors);

    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "error",
    };
  }
  if (!validatedFields.data.id) {
    return {
      message: "error",
    };
  }

  let data: Partial<{{capitalizedTable}}> = {
    {{#each columns}}
    {{this}}: validatedFields.data.{{this}},
    {{/each}}
  };

{{#each uploadColumnNames}}
  const {{this}}File = formData.get("{{this}}") as File;

  let {{this}}UploadPath;

  if ({{this}}File.size) {
    {{this}}UploadPath = getUploadPath({
      file: {{this}}File,
      dir: "/uploads/{{../table}}/",
    });
    data.{{this}} = {{this}}UploadPath;
    uploadFile({ file: {{this}}File, uploadPath: {{this}}UploadPath });
  }
{{/each}}

  await db
    .update({{table}})
    .set(data)
    .where(eq({{table}}.id, validatedFields.data.id));

  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{table}}");
  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{table}}/" + validatedFields.data.id);
  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{table}}/" + validatedFields.data.id + "/edit");

  return {
    message: "success",
  };
}
